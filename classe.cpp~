/*-------------------------------------------------------------------------
***************************************************************************
* @file classe.cpp
* @author Isaac Jesus da Silva - Centro Universitário da FEI
* @version V0.1.4
* @created 04/11/2014
* @Modified 14/11/2014
* @e-mail isaac25silva@yahoo.com.br
***************************************************************************
Arquivo fonte que contem a implementação da Rede Neural Artificial
/------------------------------------------------------------------------*/

#include <iostream>
#include "classe.h"	/* MatrixVector, Matrix3d */
#include <cmath>	/* exp, tanh */
#include <iterator>	/* istream_iterator */
#include <fstream>	/* ifstream */
#include <vector>	/* vector */
#include <time.h>       /* time */
#include <stdlib.h>     /* srand, rand */

using namespace std;

void SGW::smallGriWorld(unsigned int row, unsigned int col)
{
cout<<"Criando mundo de grades"<<endl;

unsigned int 	gama = 1;
int 		Rt = 0;
unsigned int 	K=0;

Matrix2d Pi[14];
std::vector<double> P(14,0); //inicializa os estados com valor 0
std::vector<double> V(14,0); //inicializa os estados com valor 0



}

////==============================================================================================
////--------------------Salva os valores do treinamento no arquivo--------------------------------
////==============================================================================================
//void RNA::saveValue( Matrix3d W[], MatrixVector Ws[], double Wo, int numNeuronios, int numNeuroFinal, double alphaF, double nF, int numCamadaEscondidaF, unsigned int numEntradasF, unsigned int iteracoes, std::string fileName)
//{
//    std::string separator = " "; // Use blank as default separator between single features
//    std::fstream File;

//    File.open( fileName, std::ios::out);
//    if (File.good() && File.is_open())
//    {
//	File << iteracoes << separator;
//	File << alphaF << separator;
//	File << nF << separator;
//	File << numCamadaEscondidaF << separator;
//	File << numEntradasF << separator;
//	File << numNeuroFinal << separator;
//	File << numNeuronios << separator;
//	File << Wo << separator;
//        File << std::endl;

//	    for(int z=0; z<numCamadaEscondidaF; z++)
//		for(int y=0; y<numNeuronios; y++)
//	    	    for(int x=0; x<numNeuronios; x++)// Varre todo o vetor Xinput de entrada
//			File << W[y].camada[z].vetor[x]<< separator;

//        File << std::endl;

//	    //Valores de Ws-------------------------------------
//		for(int y=0; y<numNeuroFinal; y++)
//	    	    for(int x=0; x<numNeuronios; x++) // Varre todo o vetor Sj de entrada
//			File << Ws[y].vetor[x]<< separator;
//	    //-------------------------------------------------------------
//        File.flush();
//        File.close();
//    }
//    else
//	printf("Erro ao Salvar o arquivo\n");
//}
////===============================================================================================
////-------------Abre o arquivo que contem os valores de W ----------------------------------------
////===============================================================================================
//void RNA::openValueW( Matrix3d W[], MatrixVector Ws[], double &Wo, int &numNeuronios, int &numNeuroFinal, double &alphaF, double &nF, int &numCamadaEscondidaF, unsigned int &numEntradasF, unsigned int &iteracoes, std::string fileName)
//{
//    const char *fileName1;
//    fileName1 = fileName.c_str();

//	std::ifstream File(fileName1);	//Abre o arquivo

//	if (File.fail()) //Verifica se houve falha ao abrir o arquivo
//	{
//		cout << "file opening failed" << endl;
//		system("PAUSE");
//		exit (1); // Em caso de falha termina o programa
//	}

//	std::istream_iterator<double> start(File), end; //inicio e fim do arquivo
//	std::vector<double> vectorTemp(start, end); //Vetor temporário para carregar todo o arquivo

//	unsigned int inc=0;

//	iteracoes = vectorTemp[0];
//	alphaF = vectorTemp[1];
//	nF = vectorTemp[2];
//	numCamadaEscondidaF  = vectorTemp[3];
//	numEntradasF  = vectorTemp[4];
//	numNeuroFinal  = vectorTemp[5];
//	numNeuronios  = vectorTemp[6];
//	Wo  = vectorTemp[7];

//	inc=8;
//	    for(int z=0; z<numCamadaEscondidaF; z++)
//		for(int y=0; y<numNeuronios; y++)
//	    	    for(int x=0; x<numNeuronios; x++)// Varre todo o vetor Xinput de entrada
//		    {
//			W[y].camada[z].vetor[x] = vectorTemp[inc];
//			inc++;
//		    }

//	    //Valores de Ws-------------------------------------
//	    for(int y=0; y<numNeuroFinal; y++)
//	    	    for(int x=0; x<numNeuronios; x++) // Varre todo o vetor Sj de entrada
//		    {
//			Ws[y].vetor[x] = vectorTemp[inc];
//			inc++;
//		    }
//	    //-------------------------------------------------------------
//}
////===============================================================================================
////-------------Abre o arquivo e carrega apenas os parâmetros da rede ----------------------------
////===============================================================================================
//void RNA::openParametros( double &Wo, int &numNeuronios, int &numNeuroFinal, double &alphaF, double &nF, int &numCamadaEscondidaF, unsigned int &numEntradasF, unsigned int &iteracoes, unsigned int &numSaidas, std::string fileName)
//{
//    const char *fileName1;
//    fileName1 = fileName.c_str();

//	std::ifstream File(fileName1);	//Abre o arquivo

//	if (File.fail())  //Verifica se houve falha ao abrir o arquivo
//	{
//		cout << "file opening failed" << endl;
//		system("PAUSE");
//		exit (1); // Em caso de falha termina o programa
//	}

//	std::istream_iterator<double> start(File), end; //inicio e fim do arquivo
//	std::vector<double> vectorTemp(start, end); //Vetor temporário para carregar todo o arquivo

//	iteracoes = vectorTemp[0];
//	alphaF = vectorTemp[1];
//	nF = vectorTemp[2];
//	numCamadaEscondidaF  = vectorTemp[3];
//	numEntradasF  = vectorTemp[4];
//	numNeuroFinal  = vectorTemp[5];
//	numNeuronios  = vectorTemp[6];
//	Wo  = vectorTemp[7];
//	numSaidas = numNeuroFinal;

//}
////===============================================================================================
////-------------Abre o arquivo que contem a tabela para treinamento ou teste ---------------------
////===============================================================================================
//unsigned int RNA::openFiletoGetQvalueVector(MatrixVector matrix[], unsigned int numCol, std::string fileName)
//{
//    const char *fileName1;
//    fileName1 = fileName.c_str();

//    std::ifstream File(fileName1);			//Abre o arquivo
//    std::istream_iterator<double> start(File), end; 	//inicio e fim do arquivo
//    std::vector<double> vectorTemp(start, end); //Vetor temporário para carregar todo o arquivo

//	int y=0;
//        for (int i = 0; i < vectorTemp.size(); i=i+numCol)
//        {
//		for(int x=0; x<numCol; x++) //Carrega o vetor
//		{
//			matrix[x].vetor.push_back(vectorTemp[i+x]);
//			//cout<<matrix[x].vetor[y]<<"\t";
////==============================================================================================
////--------------------Salva os valores do treinamento no arquivo--------------------------------
////==============================================================================================
//void RNA::saveValue( Matrix3d W[], MatrixVector Ws[], double Wo, int numNeuronios, int numNeuroFinal, double alphaF, double nF, int numCamadaEscondidaF, unsigned int numEntradasF, unsigned int iteracoes, std::string fileName)
//{
//    std::string separator = " "; // Use blank as default separator between single features
//    std::fstream File;

//    File.open( fileName, std::ios::out);
//    if (File.good() && File.is_open())
//    {
//	File << iteracoes << separator;
//	File << alphaF << separator;
//	File << nF << separator;
//	File << numCamadaEscondidaF << separator;
//	File << numEntradasF << separator;
//	File << numNeuroFinal << separator;
//	File << numNeuronios << separator;
//	File << Wo << separator;
//        File << std::endl;

//	    for(int z=0; z<numCamadaEscondidaF; z++)
//		for(int y=0; y<numNeuronios; y++)
//	    	    for(int x=0; x<numNeuronios; x++)// Varre todo o vetor Xinput de entrada
//			File << W[y].camada[z].vetor[x]<< separator;

//        File << std::endl;

//	    //Valores de Ws-------------------------------------
//		for(int y=0; y<numNeuroFinal; y++)
//	    	    for(int x=0; x<numNeuronios; x++) // Varre todo o vetor Sj de entrada
//			File << Ws[y].vetor[x]<< separator;
//	    //-------------------------------------------------------------
//        File.flush();
//        File.close();
//    }
//    else
//	printf("Erro ao Salvar o arquivo\n");
//}
////===============================================================================================
////-------------Abre o arquivo que contem os valores de W ----------------------------------------
////===============================================================================================
//void RNA::openValueW( Matrix3d W[], MatrixVector Ws[], double &Wo, int &numNeuronios, int &numNeuroFinal, double &alphaF, double &nF, int &numCamadaEscondidaF, unsigned int &numEntradasF, unsigned int &iteracoes, std::string fileName)
//{
//    const char *fileName1;
//    fileName1 = fileName.c_str();

//	std::ifstream File(fileName1);	//Abre o arquivo

//	if (File.fail()) //Verifica se houve falha ao abrir o arquivo
//	{
//		cout << "file opening failed" << endl;
//		system("PAUSE");
//		exit (1); // Em caso de falha termina o programa
//	}

//	std::istream_iterator<double> start(File), end; //inicio e fim do arquivo
//	std::vector<double> vectorTemp(start, end); //Vetor temporário para carregar todo o arquivo

//	unsigned int inc=0;

//	iteracoes = vectorTemp[0];
//	alphaF = vectorTemp[1];
//	nF = vectorTemp[2];
//	numCamadaEscondidaF  = vectorTemp[3];
//	numEntradasF  = vectorTemp[4];
//	numNeuroFinal  = vectorTemp[5];
//	numNeuronios  = vectorTemp[6];
//	Wo  = vectorTemp[7];

//	inc=8;
//	    for(int z=0; z<numCamadaEscondidaF; z++)
//		for(int y=0; y<numNeuronios; y++)
//	    	    for(int x=0; x<numNeuronios; x++)// Varre todo o vetor Xinput de entrada
//		    {
//			W[y].camada[z].vetor[x] = vectorTemp[inc];
//			inc++;
//		    }

//	    //Valores de Ws-------------------------------------
//	    for(int y=0; y<numNeuroFinal; y++)
//	    	    for(int x=0; x<numNeuronios; x++) // Varre todo o vetor Sj de entrada
//		    {
//			Ws[y].vetor[x] = vectorTemp[inc];
//			inc++;
//		    }
//	    //-------------------------------------------------------------
//}
////===============================================================================================
////-------------Abre o arquivo e carrega apenas os parâmetros da rede ----------------------------
////===============================================================================================
//void RNA::openParametros( double &Wo, int &numNeuronios, int &numNeuroFinal, double &alphaF, double &nF, int &numCamadaEscondidaF, unsigned int &numEntradasF, unsigned int &iteracoes, unsigned int &numSaidas, std::string fileName)
//{
//    const char *fileName1;
//    fileName1 = fileName.c_str();

//	std::ifstream File(fileName1);	//Abre o arquivo

//	if (File.fail())  //Verifica se houve falha ao abrir o arquivo
//	{
//		cout << "file opening failed" << endl;
//		system("PAUSE");
//		exit (1); // Em caso de falha termina o programa
//	}

//	std::istream_iterator<double> start(File), end; //inicio e fim do arquivo
//	std::vector<double> vectorTemp(start, end); //Vetor temporário para carregar todo o arquivo

//	iteracoes = vectorTemp[0];
//	alphaF = vectorTemp[1];
//	nF = vectorTemp[2];
//	numCamadaEscondidaF  = vectorTemp[3];
//	numEntradasF  = vectorTemp[4];
//	numNeuroFinal  = vectorTemp[5];
//	numNeuronios  = vectorTemp[6];
//	Wo  = vectorTemp[7];
//	numSaidas = numNeuroFinal;

//}
////===============================================================================================
////-------------Abre o arquivo que contem a tabela para treinamento ou teste ---------------------
////===============================================================================================
//unsigned int RNA::openFiletoGetQvalueVector(MatrixVector matrix[], unsigned int numCol, std::string fileName)
//{
//    const char *fileName1;
//    fileName1 = fileName.c_str();

//    std::ifstream File(fileName1);			//Abre o arquivo
//    std::istream_iterator<double> start(File), end; 	//inicio e fim do arquivo
//    std::vector<double> vectorTemp(start, end); //Vetor temporário para carregar todo o arquivo

//	int y=0;
//        for (int i = 0; i < vectorTemp.size(); i=i+numCol)
//        {
//		for(int x=0; x<numCol; x++) //Carrega o vet
//		}
//                //std::cout<<std::endl;
//		y++;
//        }
//    return 0;
//}
////==============================================================================================
